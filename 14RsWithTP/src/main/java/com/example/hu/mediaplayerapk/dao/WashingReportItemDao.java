package com.example.hu.mediaplayerapk.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.hu.mediaplayerapk.bean.WashingReportItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WASHING_REPORT_ITEM".
*/
public class WashingReportItemDao extends AbstractDao<WashingReportItem, Long> {

    public static final String TABLENAME = "WASHING_REPORT_ITEM";

    /**
     * Properties of entity WashingReportItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FaceID = new Property(1, String.class, "FaceID", false, "FACE_ID");
        public final static Property WashingEventCnt = new Property(2, int.class, "washingEventCnt", false, "WASHING_EVENT_CNT");
        public final static Property MoveAwayCnt = new Property(3, int.class, "moveAwayCnt", false, "MOVE_AWAY_CNT");
        public final static Property TempErrorCnt = new Property(4, int.class, "tempErrorCnt", false, "TEMP_ERROR_CNT");
        public final static Property TempValidCnt = new Property(5, int.class, "tempValidCnt", false, "TEMP_VALID_CNT");
        public final static Property AverageTemp = new Property(6, double.class, "averageTemp", false, "AVERAGE_TEMP");
        public final static Property LastTemp = new Property(7, double.class, "lastTemp", false, "LAST_TEMP");
        public final static Property IsLadyOrMen = new Property(8, int.class, "isLadyOrMen", false, "IS_LADY_OR_MEN");
        public final static Property PlayNum = new Property(9, int.class, "playNum", false, "PLAY_NUM");
        public final static Property IsPlayInterrupt = new Property(10, int.class, "isPlayInterrupt", false, "IS_PLAY_INTERRUPT");
        public final static Property IsLongInterval = new Property(11, int.class, "isLongInterval", false, "IS_LONG_INTERVAL");
        public final static Property Time = new Property(12, int.class, "time", false, "TIME");
    }


    public WashingReportItemDao(DaoConfig config) {
        super(config);
    }
    
    public WashingReportItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WASHING_REPORT_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FACE_ID\" TEXT," + // 1: FaceID
                "\"WASHING_EVENT_CNT\" INTEGER NOT NULL ," + // 2: washingEventCnt
                "\"MOVE_AWAY_CNT\" INTEGER NOT NULL ," + // 3: moveAwayCnt
                "\"TEMP_ERROR_CNT\" INTEGER NOT NULL ," + // 4: tempErrorCnt
                "\"TEMP_VALID_CNT\" INTEGER NOT NULL ," + // 5: tempValidCnt
                "\"AVERAGE_TEMP\" REAL NOT NULL ," + // 6: averageTemp
                "\"LAST_TEMP\" REAL NOT NULL ," + // 7: lastTemp
                "\"IS_LADY_OR_MEN\" INTEGER NOT NULL ," + // 8: isLadyOrMen
                "\"PLAY_NUM\" INTEGER NOT NULL ," + // 9: playNum
                "\"IS_PLAY_INTERRUPT\" INTEGER NOT NULL ," + // 10: isPlayInterrupt
                "\"IS_LONG_INTERVAL\" INTEGER NOT NULL ," + // 11: isLongInterval
                "\"TIME\" INTEGER NOT NULL );"); // 12: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WASHING_REPORT_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WashingReportItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String FaceID = entity.getFaceID();
        if (FaceID != null) {
            stmt.bindString(2, FaceID);
        }
        stmt.bindLong(3, entity.getWashingEventCnt());
        stmt.bindLong(4, entity.getMoveAwayCnt());
        stmt.bindLong(5, entity.getTempErrorCnt());
        stmt.bindLong(6, entity.getTempValidCnt());
        stmt.bindDouble(7, entity.getAverageTemp());
        stmt.bindDouble(8, entity.getLastTemp());
        stmt.bindLong(9, entity.getIsLadyOrMen());
        stmt.bindLong(10, entity.getPlayNum());
        stmt.bindLong(11, entity.getIsPlayInterrupt());
        stmt.bindLong(12, entity.getIsLongInterval());
        stmt.bindLong(13, entity.getTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WashingReportItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String FaceID = entity.getFaceID();
        if (FaceID != null) {
            stmt.bindString(2, FaceID);
        }
        stmt.bindLong(3, entity.getWashingEventCnt());
        stmt.bindLong(4, entity.getMoveAwayCnt());
        stmt.bindLong(5, entity.getTempErrorCnt());
        stmt.bindLong(6, entity.getTempValidCnt());
        stmt.bindDouble(7, entity.getAverageTemp());
        stmt.bindDouble(8, entity.getLastTemp());
        stmt.bindLong(9, entity.getIsLadyOrMen());
        stmt.bindLong(10, entity.getPlayNum());
        stmt.bindLong(11, entity.getIsPlayInterrupt());
        stmt.bindLong(12, entity.getIsLongInterval());
        stmt.bindLong(13, entity.getTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WashingReportItem readEntity(Cursor cursor, int offset) {
        WashingReportItem entity = new WashingReportItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FaceID
            cursor.getInt(offset + 2), // washingEventCnt
            cursor.getInt(offset + 3), // moveAwayCnt
            cursor.getInt(offset + 4), // tempErrorCnt
            cursor.getInt(offset + 5), // tempValidCnt
            cursor.getDouble(offset + 6), // averageTemp
            cursor.getDouble(offset + 7), // lastTemp
            cursor.getInt(offset + 8), // isLadyOrMen
            cursor.getInt(offset + 9), // playNum
            cursor.getInt(offset + 10), // isPlayInterrupt
            cursor.getInt(offset + 11), // isLongInterval
            cursor.getInt(offset + 12) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WashingReportItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFaceID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWashingEventCnt(cursor.getInt(offset + 2));
        entity.setMoveAwayCnt(cursor.getInt(offset + 3));
        entity.setTempErrorCnt(cursor.getInt(offset + 4));
        entity.setTempValidCnt(cursor.getInt(offset + 5));
        entity.setAverageTemp(cursor.getDouble(offset + 6));
        entity.setLastTemp(cursor.getDouble(offset + 7));
        entity.setIsLadyOrMen(cursor.getInt(offset + 8));
        entity.setPlayNum(cursor.getInt(offset + 9));
        entity.setIsPlayInterrupt(cursor.getInt(offset + 10));
        entity.setIsLongInterval(cursor.getInt(offset + 11));
        entity.setTime(cursor.getInt(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WashingReportItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WashingReportItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WashingReportItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
