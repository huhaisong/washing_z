package com.example.hu.database.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.hu.mediaplayerapk.bean.WashingReportItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WASHING_REPORT_ITEM".
*/
public class WashingReportItemDao extends AbstractDao<WashingReportItem, Void> {

    public static final String TABLENAME = "WASHING_REPORT_ITEM";

    /**
     * Properties of entity WashingReportItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property WashingEventCnt = new Property(0, int.class, "washingEventCnt", false, "WASHING_EVENT_CNT");
        public final static Property MoveAwayCnt = new Property(1, int.class, "moveAwayCnt", false, "MOVE_AWAY_CNT");
        public final static Property TempErrorCnt = new Property(2, int.class, "tempErrorCnt", false, "TEMP_ERROR_CNT");
        public final static Property TempValidCnt = new Property(3, int.class, "tempValidCnt", false, "TEMP_VALID_CNT");
        public final static Property AverageTemp = new Property(4, double.class, "averageTemp", false, "AVERAGE_TEMP");
        public final static Property LastTemp = new Property(5, double.class, "lastTemp", false, "LAST_TEMP");
        public final static Property FaceID = new Property(6, String.class, "FaceID", false, "FACE_ID");
        public final static Property IsLadyOrMen = new Property(7, int.class, "isLadyOrMen", false, "IS_LADY_OR_MEN");
    }


    public WashingReportItemDao(DaoConfig config) {
        super(config);
    }
    
    public WashingReportItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WASHING_REPORT_ITEM\" (" + //
                "\"WASHING_EVENT_CNT\" INTEGER NOT NULL ," + // 0: washingEventCnt
                "\"MOVE_AWAY_CNT\" INTEGER NOT NULL ," + // 1: moveAwayCnt
                "\"TEMP_ERROR_CNT\" INTEGER NOT NULL ," + // 2: tempErrorCnt
                "\"TEMP_VALID_CNT\" INTEGER NOT NULL ," + // 3: tempValidCnt
                "\"AVERAGE_TEMP\" REAL NOT NULL ," + // 4: averageTemp
                "\"LAST_TEMP\" REAL NOT NULL ," + // 5: lastTemp
                "\"FACE_ID\" TEXT," + // 6: FaceID
                "\"IS_LADY_OR_MEN\" INTEGER NOT NULL );"); // 7: isLadyOrMen
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WASHING_REPORT_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WashingReportItem entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getWashingEventCnt());
        stmt.bindLong(2, entity.getMoveAwayCnt());
        stmt.bindLong(3, entity.getTempErrorCnt());
        stmt.bindLong(4, entity.getTempValidCnt());
        stmt.bindDouble(5, entity.getAverageTemp());
        stmt.bindDouble(6, entity.getLastTemp());
 
        String FaceID = entity.getFaceID();
        if (FaceID != null) {
            stmt.bindString(7, FaceID);
        }
        stmt.bindLong(8, entity.getIsLadyOrMen());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WashingReportItem entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getWashingEventCnt());
        stmt.bindLong(2, entity.getMoveAwayCnt());
        stmt.bindLong(3, entity.getTempErrorCnt());
        stmt.bindLong(4, entity.getTempValidCnt());
        stmt.bindDouble(5, entity.getAverageTemp());
        stmt.bindDouble(6, entity.getLastTemp());
 
        String FaceID = entity.getFaceID();
        if (FaceID != null) {
            stmt.bindString(7, FaceID);
        }
        stmt.bindLong(8, entity.getIsLadyOrMen());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public WashingReportItem readEntity(Cursor cursor, int offset) {
        WashingReportItem entity = new WashingReportItem( //
            cursor.getInt(offset + 0), // washingEventCnt
            cursor.getInt(offset + 1), // moveAwayCnt
            cursor.getInt(offset + 2), // tempErrorCnt
            cursor.getInt(offset + 3), // tempValidCnt
            cursor.getDouble(offset + 4), // averageTemp
            cursor.getDouble(offset + 5), // lastTemp
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // FaceID
            cursor.getInt(offset + 7) // isLadyOrMen
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WashingReportItem entity, int offset) {
        entity.setWashingEventCnt(cursor.getInt(offset + 0));
        entity.setMoveAwayCnt(cursor.getInt(offset + 1));
        entity.setTempErrorCnt(cursor.getInt(offset + 2));
        entity.setTempValidCnt(cursor.getInt(offset + 3));
        entity.setAverageTemp(cursor.getDouble(offset + 4));
        entity.setLastTemp(cursor.getDouble(offset + 5));
        entity.setFaceID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsLadyOrMen(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(WashingReportItem entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(WashingReportItem entity) {
        return null;
    }

    @Override
    public boolean hasKey(WashingReportItem entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
